# Basic CI/CD Pipeline for Next.js App (AgriConnect)
# This workflow is triggered on pushes and pull requests to the main branch.

name: AgriConnect CI

on:
  push:
    branches: [ "main" ] # Or your primary development branch, e.g., "develop"
  pull_request:
    branches: [ "main" ] # Or your primary development branch

jobs:
  build-and-lint:
    name: Build, Lint, and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x] # Test against common Node.js LTS versions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm' # Cache npm dependencies

    - name: Install dependencies
      run: npm ci # Use 'npm ci' for cleaner installs in CI environments

    - name: Run ESLint
      run: npm run lint # Assumes 'lint' script is defined in package.json

    - name: Build project
      run: npm run build # Assumes 'build' script is defined in package.json

    # Placeholder for running tests
    # - name: Run tests
    #   run: npm test # Assumes 'test' script is defined in package.json (e.g., using Jest or Vitest)
    #   # Add environment variables if your tests need them, e.g., for a test database
    #   # env:
    #   #   NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }} # Example using GitHub secrets
    #   #   NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}

# Future considerations for this CI pipeline:
# 1. Caching:
#    - Cache Next.js build output (.next/cache) to speed up subsequent builds.
#      uses: actions/cache@v3
#      with:
#        path: |
#          ~/.npm
#          ${{ github.workspace }}/.next/cache
#        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx') }}
#        restore-keys: |
#          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
#
# 2. Testing:
#    - Implement actual unit, integration, and end-to-end tests.
#    - Configure test runners (Jest, Playwright, Cypress, etc.).
#    - Report test coverage.
#
# 3. Deployment:
#    - Add a separate job for deployment (e.g., to Vercel, AWS, Netlify).
#    - This job would typically run only on pushes to the 'main' branch (not pull requests).
#    - Use deployment-specific actions or CLI commands.
#    - Example for Vercel:
#      # deploy:
#      #   needs: build-and-lint # Ensure build and tests pass before deploying
#      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#      #   runs-on: ubuntu-latest
#      #   steps:
#      #     - uses: actions/checkout@v4
#      #     - name: Deploy to Vercel
#      #       uses: amondnet/vercel-action@v25 # Or official Vercel CLI
#      #       with:
#      #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
#      #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
#      #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
#      #         vercel-args: '--prod' # Deploy to production
#
# 4. Security Scans:
#    - Integrate tools like Snyk or Dependabot for vulnerability scanning.
#
# 5. Notifications:
#    - Set up notifications for build failures/successes (e.g., Slack, email).